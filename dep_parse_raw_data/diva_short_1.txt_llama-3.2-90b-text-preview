To analyze the sentence and produce a dependency tree, we'll break down the sentence into its components and assign a token index to each one.

The sentence is: Även om det rör sig om att man som 2-åring lär sig att inte springa in ett träd för att man får väldigt ont då.

 Tokenized sentence:
1. Även
2. om
3. det
4. rör
5. sig
6. om
7. att
8. man
9. som
10. 2-åring
11. lär
12. sig
13. att
14. inte
15. springa
16. in
17. ett
18. träd
19. för
20. att
21. man
22. får
23. väldigt
24. ont
25. då
26. .

Now, we can assign dependencies between the tokens. The head of the sentence is "lär" (learn), and the other tokens depend on it either directly or indirectly.

 Dependency tree:
(1, Även, 0)
(2, om, 4)
(3, det, 4)
(4, rör, 11)
(5, sig, 4)
(6, om, 7)
(7, att, 11)
(8, man, 11)
(9, som, 10)
(10, 2-åring, 11)
(11, lär, 0)
(12, sig, 15)
(13, att, 15)
(14, inte, 15)
(15, springa, 11)
(16, in, 18)
(17, ett, 18)
(18, träd, 19)
(19, för, 20)
(20, att, 22)
(21, man, 22)
(22, får, 11)
(23, väldigt, 24)
(24, ont, 22)
(25, då, 0)
(26, ., 0)

Note: In a more advanced dependency parsing, the dependency labels (e.g. "nsubj", "advmod", etc.) would be included as well, but here we're just focusing on the basic token dependencies.

 However in this simplified tree, the actual labels were not specified as the information given. If you would to know or to provide anything else please say so.