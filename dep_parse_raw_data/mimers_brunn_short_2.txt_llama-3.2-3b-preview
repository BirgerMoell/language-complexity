To analyze the sentence and produce a dependency tree, we need to break down the sentence into its individual tokens. Here's the breakdown:

1. Efter
2. 2:
3. a
4. världskriget
5. så
6. bestämde
7. sig
8. 51
9. länder
10. att
11. bilda
12. FN
13. Förenta
14. nationerna
15. .

The dependency tree for the sentence can be constructed as follows:

 [(1, Efter, 0), (2, 2:, 1), (3, a, 2), (4, världskriget, 3), (5, så, 4), (6, bestämde, 5), (7, sig, 6), (8, 51, 7), (9, länder, 8), (10, att, 9), (11, bilda, 10), (12, FN, 11), (13, Förenta, 12), (14, nationerna, 13), (15, ., 14)]

Here's a Python code snippet to generate the dependency tree:

```python
def get_dependencies(sentence):
    # Tokenize the sentence
    tokens = sentence.split()
    words = []
    for token in tokens:
        word = ''
        i = 0
        while i < len(token):
            if token[i].isalpha():
                word += token[i]
                i += 1
            else:
                words.append((word, token[i:i+1]))
                word = ''
        # Find dependencies
        if words[-1][0] in ['(', ',', ';', ':', '.', '?', '!']:
            dependencies = []
            for token in tokens:
                i = tokens.index(token)
                if (i > 0 and tokens[i-1] in [',', ';', ':', '.', '?', '!']) or \
                   (i < len(tokens)-1 and tokens[i+1] in [',', ';', ':', '.', '?', '!']) or \
                   (i == 0 and tokens[i+1] in [',', ';', ':', '.', '?', '!']) or \
                   (i == len(tokens)-1 and tokens[i-1] in [',', ';', ':', '.', '?', '!']):
                    dependencies.append((i, token, tokens.index(words[-1][0])))
                else:
                    dependencies.append((i, token, 0))
            return dependencies
        else:
            dependencies = [(i, token, 0) for i, token in enumerate(tokens)]
            return dependencies

sentence = "Efter 2: a världskriget så bestämde sig 51 länder att bilda FN, Förenta nationerna."
dependencies = get_dependencies(sentence)
for dependency in dependencies:
    print(dependency)
```

Note: The dependency tree might not be perfect since it's based on simplified rules and doesn't take into account nuances of the Swedish language like verb conjugation or grammatical agreement.