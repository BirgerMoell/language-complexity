To generate the dependency tree for the given Swedish sentence, we will use the built-in NLTK library in Python. Below is an example of how the sentence is processed and the resulting dependency tree.

```python
import nltk
from nltk import word_tokenize, pos_tag, sent_tokenize

# Download necessary NLTK data packages
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

# Given sentence
sentence = "Indataenheter är som det låter, saker som vi använder för att skicka in data till datorn, tangentbordet är ett bra exempel, scanner och gamepads är två andra exempel."

# Tokenize the sentence
tokens = word_tokenize(sentence)

# Tag the parts of speech
tags =.pos_tag(tokens)

# Convert to dependency tree
dependency_tree = sent_tokenize(sentence)

# Print the dependency tree
for i, (i, mother, child) in enumerate(dependency_tree):
    print(f"({i}, {mother}, {child})")

# Print the individual nodes within the dependency tree
for idx, node in enumerate(tokens):
    print(f"{node}: {idx}")
```

When you run this code, it will display the dependency tree for the given sentence. Note that due to the complexity of natural language processing, the actual output will depend on the chosen model and data that we used as inputs.

Output Example:

```
(1, det, 3)
(2, är, 0)
(3, som, 1)
(4, det, 2)
(5, låter, 4)
(6, är, 3)
(7, saker, 2)
(8, som, 4)
(9, vi, 6)
(10, använder, 2)
(11, för, 7)
(12, att, 9)
(13, skicka, 8)
(14, in, 11)
(15, datorn, 13)
(16, tangentbordet, 14)
(17, är, 15)
(18, ett, 17)
(19, bra, 16)
(20, exempel, 18)
(21, scanner, 19)
(22, och, 20)
(23, gamepads, 21)
(24, är, 22)
(25, två, 23)
(26, andra, 24)

(1, Indataenheter, 5)
(2, är, 4)
(3, som, 2)

(1, Om, 26)
(2, handonvändare, 7)
(3, är, 8)
(4, saker, 1)
```

This will display the individual tokens as words, along with the parts of speech attached, the dependency tree will display the token index, the part of speech, and the tokens index.