To analyze the provided Swedish sentence and create a dependency tree, we first need to identify individual tokens and their dependencies. The sentence is:

"Man startar oftast FTP genom att, liksom med TELNET, skriva FTP och sen domännamnet på dn dator som du vill koppla upp dig till."

Here's the tokenization and the corresponding dependency relationships:

1. Man
2. startar
3. oftast
4. FTP
5. genom
6. att
7. ,
8. liksom
9. med
10. TELNET
11. ,
12. skriva
13. FTP
14. och
15. sen
16. domännamnet
17. på
18. dn
19. dator
20. som
21. du
22. vill
23. koppla
24. upp
25. dig
26. till
27. .

Next, we will establish the head relationships:

1. (1, Man, 2)         # Man is subject of startar
2. (2, startar, 0)     # startar is the root of the sentence
3. (3, oftast, 2)      # oftast modifies startar
4. (4, FTP, 2)         # FTP is object of startar
5. (5, genom, 12)      # genom leads to the infinitive clause starting with skriva
6. (6, att, 5)         # att introduces the infinitive clause
7. (7, ,, 5)           # comma after att
8. (8, liksom, 12)     # liksom modifies the action of skriva
9. (9, med, 10)        # med introduces a prepositional phrase
10. (10, TELNET, 9)    # TELNET is object of med
11. (11, ,, 12)        # comma after TELNET
12. (12, skriva, 5)    # skriva is the main verb in the infinitive clause
13. (13, FTP, 12)      # FTP is object of skriva
14. (14, och, 15)      # och connects the following phrases
15. (15, sen, 16)      # sen modifies domännamnet
16. (16, domännamnet, 12) # domännamnet is object of the clause
17. (17, på, 19)       # på introduces a prepositional phrase
18. (18, dn, 19)       # dn modifies dator
19. (19, dator, 16)    # dator is object of på
20. (20, som, 19)      # som introduces a relative clause
21. (21, du, 22)       # du is subject of vill
22. (22, vill, 23)     # vill is a verb in the final clause
23. (23, koppla, 22)   # koppla is what du wants to do
24. (24, upp, 23)      # upp modifies koppla
25. (25, dig, 24)      # dig is the object of koppla
26. (26, till, 0)      # till is a final preposition
27. (27, ., 2)         # final punctuation

The resulting dependency tree output is:

```python
[(1, Man, 2), (2, startar, 0), (3, oftast, 2), (4, FTP, 2), (5, genom, 12), (6, att, 5), (7, ,, 5), (8, liksom, 12), (9, med, 10), (10, TELNET, 9), (11, ,, 12), (12, skriva, 5), (13, FTP, 12), (14, och, 15), (15, sen, 16), (16, domännamnet, 12), (17, på, 19), (18, dn, 19), (19, dator, 16), (20, som, 19), (21, du, 22), (22, vill, 23), (23, koppla, 22), (24, upp, 23), (25, dig, 24), (26, till, 0), (27, ., 2)]
```