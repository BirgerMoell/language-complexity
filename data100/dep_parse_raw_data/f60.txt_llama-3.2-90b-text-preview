The given Swedish sentence can be broken down into the following tokens:

1. Fördelar
2. &
3. nackdelar
4. USB
5. -
6. fördelar
7. Implementerad
8. standard
9. i
10. PC
11. och
12. som
13. har
14. stort
15. operativssystemsstöd
16. ,
17. i
18. t

To construct a dependency tree, we first need to assign a part of speech tag to each token and determine the dependency relationships. After analyzing the sentence, here is a possible dependency tree:

[(1, Fördelar, 0), 
 (2, &, 0), 
 (3, nackdelar, 1), 
 (4, USB, 6), 
 (5, -, 0), 
 (6, fördelar, 1), 
 (7, Implementerad, 8), 
 (8, standard, 6), 
 (9, i, 8), 
 (10, PC, 9), 
 (11, och, 12), 
 (12, som, 13), 
 (13, har, 14), 
 (14, stort, 15), 
 (15, operativssystemsstöd, 13), 
 (16, ,, 17), 
 (17, i, 18), 
 (18, t, 17)]

However, note that this dependency tree is not unique. After analyzing the given text, it appears that "t" is likely the abbreviation of a word (perhaps "till exempel" or some other unit or body), while the entire first part is a heading ("Fördelar & nackdelar"). Thus, we might rephrase and reparse the text for a more meaningful analysis:

Here's a more plausible analysis where each part of the text is separated into different sentence structures. 

Since the text seems incomplete or not grammatically correct as one unit, we should divide it into "Fördelar & nackdelar" as the heading and "USB - fördelar" as the first item in possibly a list of items.

Here are separate analysis:
1. Fördelar & nackdelar
- As heading, and does not represent the full dependency tree.

2. USB - fördelar
 [(1, USB, 3), 
  (2, -, 0), 
  (3, fördelar, 0)]

3. (Rest of the text.)
- Here is the provided rest of the text. 
- Let's ignore characters like 'i t', at this point of the problem

[(1, Implementerad, 2), 
 (2, standard, 3), 
 (3, i, 0), 
 (4, PC, 3), 
 (5, och, 6), 
 (6, som, 7), 
 (7, har, 8), 
 (8, stort, 9), 
 (9, operativssystemsstöd, 7), 
 (10, ,, 0)]

However, these can still be improved by providing full texts and the following could be improved.

Note that natural language processing is difficult and results heavily depend on the right tools, right data, proper parameters settings for that specific model, context and certain conditions.

The state of the project heavily impacts results accuracy and so final results heavily depend on everything already done in that project before a step it occurred.