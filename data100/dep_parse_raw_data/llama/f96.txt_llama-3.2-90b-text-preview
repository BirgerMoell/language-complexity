To analyze the given Swedish sentence and produce a dependency tree, we will use a combination of natural language processing techniques and hand-coded rules. The dependency tree will be represented as a list of triples, where each triple contains the token index, the token itself, and the index of the head token.

Here is the given sentence broken down into tokens:

1. Detta
2. är
3. bra
4. att
5. veta
6. så
7. att
8. man
9. inte
10. står
11. där
12. med
13. exempelvis
14. en
15. scanner
16. som
17. man
18. köpt,
19. och
20. kommer
21. på
22. att
23. moderkortet
24. inte
25. har
26. plats
27. för
28. flera
29. kort,
30. som
31. vissa
32. scanners
33. kräver.

And here is the dependency tree:

[(1, Detta, 2), 
 (2, är, 0), 
 (3, bra, 2), 
 (4, att, 5), 
 (5, veta, 2), 
 (6, så, 7), 
 (7, att, 5), 
 (8, man, 10), 
 (9, inte, 10), 
 (10, står, 5), 
 (11, där, 10), 
 (12, med, 15), 
 (13, exempelvis, 14), 
 (14, en, 15), 
 (15, scanner, 17), 
 (16, som, 18), 
 (17, man, 18), 
 (18, köpt, 15), 
 (19, och, 20), 
 (20, kommer, 5), 
 (21, på, 23), 
 (22, att, 23), 
 (23, moderkortet, 25), 
 (24, inte, 25), 
 (25, har, 20), 
 (26, plats, 27), 
 (27, för, 29), 
 (28, flera, 29), 
 (29, kort, 25), 
 (30, som, 32), 
 (31, vissa, 32), 
 (32, scanners, 33), 
 (33, kräver, 25)].

Note that the index of the head token for the sentence's main verb 'är' (index 2) is 0, indicating that it is the root of the dependency tree.