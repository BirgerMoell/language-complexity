To analyze the given Swedish sentence and produce a dependency tree, we can break down the sentence into its individual tokens and their relationships.

The tokens in the sentence are:
1. Anledningen
2. var
3. att
4. den
5. behöves
6. till
7. kanonerna
8. ,
9. som
10. skulle
11. skjuta
12. efter
13. en
14. viss
15. tid
16. ,
17. då
18. kom
19. datorn
20. till
21. användning
22. .

Now, we can create a dependency tree for these tokens:

The dependency tree is:
[(1, Anledningen, 2), 
(2, var, 0), 
(3, att, 2), 
(4, den, 5), 
(5, behöves, 3), 
(6, till, 7), 
(7, kanonerna, 5), 
(8, Kommatera, 7), 
(9, som, 11), 
(10, skulle, 11), 
(11, skjuta, 7), 
(12, efter, 11), 
(13, en, 14), 
(14, viss, 15), 
(15, tid, 11), 
(16, Kommatera, 11), 
(17, då, 18), 
(18, kom, 0), 
(19, datorn, 18), 
(20, till, 21), 
(21, användning, 18), 
(22, Komma, 0), 'som'-5-rel, is a non-projective dependency for the last part 'sam' should also modify clause above this main-clause-token dependency index 5],


 In order to work with this parsing scheme, however, since NLP libraries typically use the 'universal dependencies' set which has over 40 relations, including 13 syntax and also provides non-typical but more concrete labels to arcs. However, as explained the full data is also available to process.
Alternative representation can be given for explanation in short as
ROOT
 VAR (var 2). 
 SBKV.att  (3) -> VSUBJ 'anledningen'
 SBKV.prn 
 PRED behöves (5); 
  NSBJ den (4); 
 PSP til ("till") is det Kanonerna(being seventh so we need 7 index 6)
 PSP.SBJ:  kanoner(7); 
 after KOMMA 
 RELKLAUS 
 MSSBJ (menings fulländlare)kom till anakonuzu --- 
 11 indexing also correct which the pred Skjuta
 There is alternative representation to give every relationship between the given.