Here's the analysis and dependency tree for the given Swedish sentence:

**Tokenization:**
1. Då
2. ändrade
3. ordet
4. hacker
5. mening
6. till
7. att
8. betyda
9. ungefär
10. "
11. En
12. person
13. som
14. arbetar
15. ,
16. sover
17. och
18. lever
19. med
20. datorer
21. "

**Dependency Tree:**
1. (1, Då, 0) -> Då (then) is a disambiguated root, or can be treated as such in absence of any other context
2. (2, ändrade, 1) -> ändrade (changed) is the main verb of the clause and Då is its apparent subject
3. (3, ordet, 2) -> ordet (the word) is the direct object of ändrade
4. (4, hacker, 3) -> hacker (hacker) is an appositive explaining ordet
5. (5, mening, 3) -> mening (meaning) is a prepositional object and modifier of ordet
6. (6, till, 5) -> till (to) is the preposition, governed by mening
7. (7, att, 6) -> att (to) is an infinitive marker
8. (8, betyda, 7) -> betyda (to mean) is the verb governed by att
9. (9, ungefär, 8) -> ungefär (approximately) is an adverbial modifier of betyda
10. (10, ", 9) -> " (quotation mark) is a non-essential punctuation
11. (11, En, 12) -> En (a) is an adjective describing person
12. (12, person, 8) -> person (person) is the subject of the phrase
13. (13, som, 14) -> som (who) is the subordinate conjunction introducing the relative clause
14. (14, arbetar, 13) -> arbetar (works) is the verb describing the relative clause, whose subject is som
15. (15, ,, 14) -> , (comma) is a non-essential punctuation
16. (16, sover, 14) -> sover (sleeps) is a coordinated parallel to arbetar
17. (17, och, 14) -> och (and) is a conjunction connecting sover to the next clause
18. (18, lever, 14) -> lever (lives) is another coordinated parallel to arbetar
19. (19, med, 18) -> med (with) is a preposition
20. (20, datorer, 19) -> datorer (computers) is the object governed by the preposition med
21. (21, ", 0) -> " (quotation mark) is a non-essential punctuation.

Please note: As the absence of multiple sentence context might cause disambiguation difficulties between clauses' subject attachment positions, syntax might also be formulated in various dependency-like structures. In these instances, individual parser interpretation would show variation.