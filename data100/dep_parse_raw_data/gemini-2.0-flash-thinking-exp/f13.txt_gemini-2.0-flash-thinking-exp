Here's a breakdown of the thought process to analyze the Swedish sentence and create the dependency tree:

1. **Understand the Request:** The goal is to analyze a Swedish sentence, create a dependency tree represented as a list of tuples, and calculate the average dependency distance. The tuple format `(index, token, head_index)` is explicitly given.

2. **Tokenization:** The first step is to break the sentence down into individual tokens. This involves separating words and punctuation marks. Crucially, the instructions highlight that punctuation *must* be included as tokens.

   *Sentence:* Hur mycket visste omvärlden om de ryska arbetslägren, och vad som pågick i Sovjetunionen.

   *Tokens:* Hur, mycket, visste, omvärlden, om, de, ryska, arbetslägren, ,, och, vad, som, pågick, i, Sovjetunionen, .

3. **Assign Token Indices:** Next, assign a numerical index to each token, starting from 1.

   1: Hur
   2: mycket
   3: visste
   4: omvärlden
   5: om
   6: de
   7: ryska
   8: arbetslägren
   9: ,
   10: och
   11: vad
   12: som
   13: pågick
   14: i
   15: Sovjetunionen
   16: .

4. **Dependency Analysis (The Core Task):**  This is the most complex part and requires understanding Swedish grammar. For each token, determine its head – the word it depends on grammatically. The root of the sentence (the main verb) will have a head index of 0.

   * **Start with the main clauses:** The sentence contains two main clauses connected by "och". Identify the main verbs of each clause.
      * Clause 1: "Hur mycket visste omvärlden om de ryska arbetslägren" -  The main verb is "visste".
      * Clause 2: "vad som pågick i Sovjetunionen" - The main verb is "pågick".

   * **Analyze Clause 1:**
      * `visste` (knew) is the main verb (head = 0).
      * `omvärlden` (the world) is the subject, doing the knowing (head = 3, visste).
      * `Hur mycket` (how much) modifies the extent of knowing (head = 3, visste). "mycket" modifies "Hur".
      * `om` (about) is a preposition introducing a prepositional phrase (head = 3, visste).
      * `de` (the) is a determiner modifying `arbetslägren` (head = 8).
      * `ryska` (Russian) is an adjective modifying `arbetslägren` (head = 8).
      * `arbetslägren` (the labor camps) is the object of the preposition "om" (head = 5).
      * `,` (comma) connects the two clauses (head = 3).

   * **Analyze Clause 2:**
      * `pågick` (was going on) is the main verb (head = 0 –  While technically the clauses are coordinated, for the dependency tree, it's simpler and common to treat the second main verb as also being dependent on the root/ treated as a root within its clause). *Initial thought might be to link "pågick" to "visste" via "och", but treating each clause relatively independently for dependency structure within the coordination is a practical approach.*
      * `vad` (what) is the subject of "pågick" (head = 13).
      * `som` (that/which) is a relative pronoun referring to "vad" (head = 11).
      * `i` (in) is a preposition introducing a prepositional phrase (head = 13).
      * `Sovjetunionen` (the Soviet Union) is the object of the preposition "i" (head = 14).
      * `och` (and) connects the two clauses (head = 3).
      * `.` (period) marks the end of the sentence (head = 13).

5. **Construct the Dependency Tree (List of Tuples):** Now, translate the dependency relationships into the specified tuple format.

   * (1, Hur, 2)
   * (2, mycket, 3)
   * (3, visste, 0)
   * (4, omvärlden, 3)
   * (5, om, 3)
   * (6, de, 8)
   * (7, ryska, 8)
   * (8, arbetslägren, 5)
   * (9, ,, 3)
   * (10, och, 3)
   * (11, vad, 13)
   * (12, som, 11)
   * (13, pågick, 0)
   * (14, i, 13)
   * (15, Sovjetunionen, 14)
   * (16, ., 13)

   *Self-Correction:* Realizing that coordinating conjunctions typically attach to the head of the first clause, I adjust the head of "och" to be "visste" (index 3). Also, the punctuation marks should ideally attach to the head of their clause.

   *Updated Dependency Tree:*
   * (1, Hur, 2)
   * (2, mycket, 3)
   * (3, visste, 0)
   * (4, omvärlden, 3)
   * (5, om, 3)
   * (6, de, 8)
   * (7, ryska, 8)
   * (8, arbetslägren, 5)
   * (9, ,, 3)
   * (10, och, 3)
   * (11, vad, 13)
   * (12, som, 11)
   * (13, pågick, 3)  *Correction: Since "och" coordinates, the second clause's main verb can be linked to the first.*
   * (14, i, 13)
   * (15, Sovjetunionen, 14)
   * (16, ., 13)

   *Further Correction:* Realizing the independent nature of the second clause, it makes more sense for 'pågick' to be a root as well. The comma and period should attach to their respective clause heads.

   *Final Corrected Dependency Tree:*
   * (1, Hur, 2)
   * (2, mycket, 3)
   * (3, visste, 0)
   * (4, omvärlden, 3)
   * (5, om, 3)
   * (6, de, 8)
   * (7, ryska, 8)
   * (8, arbetslägren, 5)
   * (9, ,, 3)
   * (10, och, 3)
   * (11, vad, 13)
   * (12, som, 11)
   * (13, pågick, 0)
   * (14, i, 13)
   * (15, Sovjetunionen, 14)
   * (16, ., 13)

6. **Calculate Average Dependency Distance:**
   * Dependency distance is the absolute difference between the head index and the dependent index.
   * Calculate the distance for each dependency:
      * |2 - 1| = 1
      * |3 - 2| = 1
      * |0 - 3| = 3
      * |3 - 4| = 1
      * |3 - 5| = 2
      * |8 - 6| = 2
      * |8 - 7| = 1
      * |5 - 8| = 3
      * |3 - 9| = 6
      * |3 - 10| = 7
      * |13 - 11| = 2
      * |11 - 12| = 1
      * |0 - 13| = 13
      * |13 - 14| = 1
      * |14 - 15| = 1
      * |13 - 16| = 3
   * Sum the distances: 1 + 1 + 3 + 1 + 2 + 2 + 1 + 3 + 6 + 7 + 2 + 1 + 13 + 1 + 1 + 3 = 48
   * Divide the sum by the number of dependencies (number of tokens excluding the root connections conceptually, but practically all tokens since they have a head): 48 / 16 = 3.0

7. **Format the Output:** Present the dependency tree and the average dependency distance clearly as requested.
```python
def analyze_swedish_sentence(sentence):
    """
    Analyzes a Swedish sentence and produces a dependency tree and average dependency distance.

    Args:
        sentence: The Swedish sentence as a string.

    Returns:
        A tuple containing:
            - A list of tuples representing the dependency tree.
            - The average dependency distance.
    """
    tokens = [token.strip() for token in sentence.split()]
    n_tokens = len(tokens)
    dependency_tree = []

    # Manually assigning dependencies based on grammatical analysis.
    # This is a simplified approach and might not be perfect for all sentences.
    # For a more robust solution, a dependency parsing library would be needed.
    dependencies = {
        1: (1, tokens[0], 2),  # Hur -> mycket
        2: (2, tokens[1], 3),  # mycket -> visste
        3: (3, tokens[2], 0),  # visste -> ROOT
        4: (4, tokens[3], 3),  # omvärlden -> visste
        5: (5, tokens[4], 3),  # om -> visste
        6: (6, tokens[5], 8),  # de -> arbetslägren
        7: (7, tokens[6], 8),  # ryska -> arbetslägren
        8: (8, tokens[7], 5),  # arbetslägren -> om
        9: (9, tokens[8], 3),  # , -> visste
        10: (10, tokens[9], 3), # och -> visste (coordinating conjunction)
        11: (11, tokens[10], 13), # vad -> pågick
        12: (12, tokens[11], 11), # som -> vad
        13: (13, tokens[12], 0), # pågick -> ROOT
        14: (14, tokens[13], 13), # i -> pågick
        15: (15, tokens[14], 14), # Sovjetunionen -> i
        16: (16, tokens[15], 13), # . -> pågick
    }

    for i in range(1, n_tokens + 1):
        dependency_tree.append(dependencies[i])

    total_distance = 0
    for _, _, head_index in dependency_tree:
        if head_index != 0:
            dependent_index = dependency_tree.index(next(item for item in dependency_tree if item[0] == dependency_tree[dependency_tree.index((_,_,head_index))] [0])) + 1
            head_token_index = head_index
            total_distance += abs(dependent_index - head_token_index)

    average_distance = total_distance / n_tokens if n_tokens > 0 else 0

    return dependency_tree, average_distance

sentence = "Hur mycket visste omvärlden om de ryska arbetslägren, och vad som pågick i Sovjetunionen."
dependency_tree, average_distance = analyze_swedish_sentence(sentence)

print(dependency_tree)
print(f"Average dependency distance: {average_distance}")
```

**Explanation of the Dependency Tree:**

* **(1, Hur, 2):** The word "Hur" (How) at index 1 depends on "mycket" (much) at index 2.
* **(2, mycket, 3):** The word "mycket" (much) at index 2 depends on the verb "visste" (knew) at index 3.
* **(3, visste, 0):** The verb "visste" (knew) at index 3 is the root of the first clause, indicated by the head index 0.
* **(4, omvärlden, 3):** The noun "omvärlden" (the world) at index 4 is the subject and depends on the verb "visste" at index 3.
* **(5, om, 3):** The preposition "om" (about) at index 5 depends on the verb "visste" at index 3.
* **(6, de, 8):** The determiner "de" (the) at index 6 depends on the noun "arbetslägren" (labor camps) at index 8.
* **(7, ryska, 8):** The adjective "ryska" (Russian) at index 7 depends on the noun "arbetslägren" at index 8.
* **(8, arbetslägren, 5):** The noun "arbetslägren" (labor camps) at index 8 is the object of the preposition "om" at index 5.
* **(9, ,, 3):** The comma "," at index 9 depends on the main verb of the first clause "visste" at index 3.
* **(10, och, 3):** The coordinating conjunction "och" (and) at index 10 connects the two clauses and depends on the main verb of the first clause "visste" at index 3.
* **(11, vad, 13):** The pronoun "vad" (what) at index 11 depends on the verb "pågick" (was going on) at index 13.
* **(12, som, 11):** The relative pronoun "som" (that/which) at index 12 depends on the pronoun "vad" at index 11.
* **(13, pågick, 0):** The verb "pågick" (was going on) at index 13 is the root of the second clause.
* **(14, i, 13):** The preposition "i" (in) at index 14 depends on the verb "pågick" at index 13.
* **(15, Sovjetunionen, 14):** The noun "Sovjetunionen" (the Soviet Union) at index 15 is the object of the preposition "i" at index 14.
* **(16, ., 13):** The full stop "." at index 16 depends on the main verb of the second clause "pågick" at index 13.

**Average Dependency Distance:**

The average dependency distance is calculated as the sum of the absolute differences between the indices of the dependent and head tokens, divided by the total number of tokens (excluding the conceptual root). In this case, it is approximately **3.0**.
