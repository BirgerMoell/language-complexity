Here's a breakdown of the thought process to achieve the dependency tree and average dependency distance for the given Swedish sentence:

1. **Understanding the Request:** The core task is dependency parsing and calculating the average dependency distance. The output format is clearly defined: `[(token_index, token, head_index)]`. Punctuation is a token. The average dependency distance requires counting the distance between each token and its head.

2. **Tokenization:** The first step is to break down the sentence into individual tokens. This involves splitting the sentence by spaces, but also treating punctuation as separate tokens.

   *  "Lösningarna"
   *  "bygger"
   *  "ofta"
   *  "på"
   *  "att"
   *  "ett"
   *  "linselement"
   *  "i"
   *  "objektivet"
   *  "eller"
   *  "att"
   *  "hela"
   *  "bildsensorn"
   *  "kan"
   *  "förflyttas"
   *  "i"
   *  "sina"
   *  "respektive"
   *  "plan"
   *  "."

3. **Dependency Parsing (The Tricky Part):**  This is where linguistic knowledge comes in. The goal is to determine the grammatical relationships between the words. This often involves identifying the main verb and then connecting other words to it or to each other. I'll go through the sentence piece by piece, thinking about the role of each word:

   * **Lösningarna (Solutions):** This feels like the subject, the thing doing the action.
   * **bygger (build/are based on):** This is the main verb. The subject `Lösningarna` performs this action. So, `bygger` is the head of `Lösningarna`. (1, Lösningarna, 2)
   * **ofta (often):** This is an adverb modifying the verb `bygger`. (3, ofta, 2)
   * **på (on/based on):**  This is a preposition introducing a prepositional phrase. It relates to the verb `bygger`. (4, på, 2)
   * **att (that/to):** This introduces a subordinate clause functioning as the object of the preposition `på`. (5, att, 4)
   * **ett (a):** This is a determiner for the noun `linselement`. (6, ett, 7)
   * **linselement (lens element):** This is a noun, part of the first subordinate clause. It is the subject of the implied verb "kan förflyttas" within this clause. The conjunction "eller" will connect this to the second part of the "att"-clause. For now, since it's the main noun within the first part of the 'att'-clause, it's reasonable to connect it to 'att'. (7, linselement, 5)
   * **i (in):** A preposition introducing a prepositional phrase modifying `linselement`. (8, i, 7)
   * **objektivet (the objective/lens):** The object of the preposition `i`. (9, objektivet, 8)
   * **eller (or):** This is a conjunction connecting two parallel elements within the "att"-clause. It connects `linselement` and `bildsensorn`. The head should be the first element in the conjunction, `linselement`. (10, eller, 7)
   * **att (that/to):** This is the second part of the disjunction introduced by "eller". It introduces the second option. (11, att, 10)
   * **hela (whole):** A determiner for `bildsensorn`. (12, hela, 13)
   * **bildsensorn (the image sensor):** This is the second element being connected by "eller". It's the subject of the implied verb "kan förflyttas" within the second part of the 'att'-clause. Its head is connected to the preceding "att". (13, bildsensorn, 11)
   * **kan (can):** An auxiliary verb modifying `förflyttas`. It belongs to both parts of the "att"-clause. A good head might be the first "att" since it governs the entire subordinate clause. (14, kan, 5)
   * **förflyttas (be moved):** The main verb within the subordinate clauses. Its subject is implied by `linselement` and `bildsensorn`. It depends on the auxiliary verb `kan`. (15, förflyttas, 14)
   * **i (in):** A preposition introducing a prepositional phrase modifying `förflyttas`. (16, i, 15)
   * **sina (their):** A possessive pronoun modifying `plan`. (17, sina, 19)
   * **respektive (respective):** An adjective modifying `plan`. (18, respektive, 19)
   * **plan (planes):** The object of the preposition `i`. (19, plan, 16)
   * **. (period):** Punctuation, typically attached to the main verb. (20, ., 2)

4. **Constructing the Dependency Tree:**  Now, assemble the triples based on the identified head-dependent relationships. Double-check the connections for logical flow and grammatical correctness.

5. **Calculating Dependency Distance:** For each token (except the root), calculate the absolute difference between its index and the index of its head.

   * Lösningarna: |1 - 2| = 1
   * ofta: |3 - 2| = 1
   * på: |4 - 2| = 2
   * att: |5 - 4| = 1
   * ett: |6 - 7| = 1
   * linselement: |7 - 5| = 2
   * i: |8 - 7| = 1
   * objektivet: |9 - 8| = 1
   * eller: |10 - 7| = 3
   * att: |11 - 10| = 1
   * hela: |12 - 13| = 1
   * bildsensorn: |13 - 11| = 2
   * kan: |14 - 5| = 9
   * förflyttas: |15 - 14| = 1
   * i: |16 - 15| = 1
   * sina: |17 - 19| = 2
   * respektive: |18 - 19| = 1
   * plan: |19 - 16| = 3
   * .: |20 - 2| = 18

6. **Calculating the Average:** Sum the dependency distances and divide by the number of dependencies (which is the number of tokens minus 1, as the root has no head).

   * Total distance = 1 + 1 + 2 + 1 + 1 + 2 + 1 + 1 + 3 + 1 + 1 + 2 + 9 + 1 + 1 + 2 + 1 + 3 + 18 = 52
   * Number of dependencies = 20 - 1 = 19
   * Average distance = 52 / 19 ≈ 2.74

7. **Final Output Formatting:** Ensure the output matches the requested format exactly, including the list of tuples for the dependency tree and the calculated average dependency distance.
```python
def analyze_swedish_sentence(sentence):
    """
    Analyzes a Swedish sentence and produces a dependency tree and average dependency distance.

    Args:
        sentence: The Swedish sentence as a string.

    Returns:
        A tuple containing:
            - A list of dependency triples in the format (token_index, token, head_index).
            - The average dependency distance for the sentence.
    """

    tokens = [(i + 1, token) for i, token in enumerate(sentence.split())]

    # Manually assigning dependency relations (This would ideally be done by a parser)
    # This is based on a likely interpretation of the sentence structure.
    dependencies = [
        (1, 'Lösningarna', 2),
        (2, 'bygger', 0),
        (3, 'ofta', 2),
        (4, 'på', 2),
        (5, 'att', 4),
        (6, 'ett', 7),
        (7, 'linselement', 5),
        (8, 'i', 7),
        (9, 'objektivet', 8),
        (10, 'eller', 7),
        (11, 'att', 10),
        (12, 'hela', 13),
        (13, 'bildsensorn', 11),
        (14, 'kan', 5), # Connecting 'kan' to the first 'att' as it governs both clauses
        (15, 'förflyttas', 14),
        (16, 'i', 15),
        (17, 'sina', 19),
        (18, 'respektive', 19),
        (19, 'plan', 16),
        (20, '.', 2)
    ]

    # Calculate average dependency distance
    total_distance = 0
    for dep in dependencies:
        if dep[2] != 0:
            total_distance += abs(dep[0] - dep[2])

    average_distance = total_distance / (len(tokens) -1) if len(tokens) > 1 else 0

    return dependencies, average_distance

sentence = "Lösningarna bygger ofta på att ett linselement i objektivet eller att hela bildsensorn kan förflyttas  i sina respektive plan."
dependency_tree, avg_distance = analyze_swedish_sentence(sentence)

print(dependency_tree)
print(f"Average Dependency Distance: {avg_distance}")
```

**Explanation of the Dependency Tree:**

* **(1, 'Lösningarna', 2):** The noun "Lösningarna" (The solutions) is the subject and depends on the verb "bygger".
* **(2, 'bygger', 0):** The verb "bygger" (build/are based on) is the root of the sentence (head 0).
* **(3, 'ofta', 2):** The adverb "ofta" (often) modifies the verb "bygger".
* **(4, 'på', 2):** The preposition "på" (on) depends on the verb "bygger".
* **(5, 'att', 4):** The conjunction "att" (that/to) introduces a subordinate clause and depends on the preposition "på".
* **(6, 'ett', 7):** The determiner "ett" (a) modifies the noun "linselement".
* **(7, 'linselement', 5):** The noun "linselement" (lens element) is the subject of the first part of the subordinate clause and depends on "att".
* **(8, 'i', 7):** The preposition "i" (in) depends on the noun "linselement".
* **(9, 'objektivet', 8):** The noun "objektivet" (the objective/lens) is the object of the preposition "i".
* **(10, 'eller', 7):** The conjunction "eller" (or) connects "linselement" and the following clause, depending on the first element "linselement".
* **(11, 'att', 10):** The conjunction "att" (that/to) introduces the second part of the subordinate clause and depends on "eller".
* **(12, 'hela', 13):** The determiner "hela" (whole) modifies the noun "bildsensorn".
* **(13, 'bildsensorn', 11):** The noun "bildsensorn" (the image sensor) is the subject of the second part of the subordinate clause and depends on the second "att".
* **(14, 'kan', 5):** The auxiliary verb "kan" (can) modifies the verb "förflyttas" and is linked to the initial "att" as it governs both potential actions.
* **(15, 'förflyttas', 14):** The verb "förflyttas" (be moved) depends on the auxiliary verb "kan".
* **(16, 'i', 15):** The preposition "i" (in) depends on the verb "förflyttas".
* **(17, 'sina', 19):** The possessive pronoun "sina" (their) modifies the noun "plan".
* **(18, 'respektive', 19):** The adjective "respektive" (respective) modifies the noun "plan".
* **(19, 'plan', 16):** The noun "plan" (planes) is the object of the preposition "i".
* **(20, '.', 2):** The punctuation mark "." depends on the root verb "bygger".

**Average Dependency Distance:**

The average dependency distance is calculated by summing the absolute differences between the token index and its head index and then dividing by the number of dependencies (which is the number of tokens minus 1, as the root has no head). In this case, the average dependency distance is approximately **2.74**.

**Important Note:** This analysis and the resulting dependency tree are based on a manual interpretation of the sentence. A proper dependency parsing task would typically involve using a trained statistical parser or rule-based system that understands Swedish grammar. The provided code simulates this process for demonstration purposes.
