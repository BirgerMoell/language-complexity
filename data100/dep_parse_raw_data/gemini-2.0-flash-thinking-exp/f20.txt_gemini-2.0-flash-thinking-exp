Here's a breakdown of the thought process behind generating the dependency tree and calculating the average dependency distance:

1. **Understanding the Request:** The core task is to create a dependency tree for a Swedish sentence and calculate the average dependency distance. The output format is explicitly defined.

2. **Tokenization:** The first step is to break down the sentence into individual tokens. This is fairly straightforward for this sentence. We need to be careful to treat punctuation marks as separate tokens.

   *Man* *trodde* *att* *de* *som* *hade* *en* *tatuering* *var* *en* *buse* *"lagförbrytare"* *men* *så* *var* *det* *absolut* *inte* *.

3. **Dependency Parsing (Manual Approach):** Since I don't have access to a live dependency parser in this environment, I'll need to parse it manually based on my understanding of Swedish grammar. This involves identifying the head (governor) and dependent of each word. I'll go through the sentence word by word:

   * **Man:**  The subject of the main clause. Its head is the main verb. `(1, Man, 2)`
   * **trodde:** The main verb of the first clause. It's the root of this part of the sentence. `(2, trodde, 0)`
   * **att:** A subordinating conjunction introducing a subordinate clause. Its head is the verb it introduces. `(3, att, 9)`
   * **de:** The subject of the subordinate clause. Its head is the verb of the clause. `(4, de, 9)`
   * **som:** A relative pronoun, modifying "de". Its head is the noun it modifies. `(5, som, 4)`
   * **hade:** The verb of the relative clause. Its head is the noun it modifies (the relative pronoun). `(6, hade, 5)`
   * **en:** Determiner modifying "tatuering". `(7, en, 8)`
   * **tatuering:** Object of the verb "hade". `(8, tatuering, 6)`
   * **var:** The main verb of the subordinate clause introduced by "att". `(9, var, 3)`
   * **en:** Determiner modifying "buse". `(10, en, 11)`
   * **buse:** Subject complement of "var". `(11, buse, 9)`
   * **"lagförbrytare":**  This is in quotation marks, suggesting it's an apposition or further explanation of "buse". It modifies "buse". `(12, "lagförbrytare", 11)`
   * **men:** A coordinating conjunction connecting the first part of the sentence with the second. The head will be the main verb of the second part. `(13, men, 15)`
   * **så:** An adverb modifying "var" in the second clause. `(14, så, 15)`
   * **var:** The main verb of the second independent clause. `(15, var, 2)`  It's coordinated with "trodde".
   * **det:** The subject of the second clause. `(16, det, 15)`
   * **absolut:** An adverb modifying "inte". `(17, absolut, 18)`
   * **inte:**  Negation, modifying the verb "var". `(18, inte, 15)`
   * **.:** Punctuation, typically attached to the root of the sentence or the head of the clause it terminates. Here, it makes sense to connect it to the main verb of the second clause. `(19, ., 15)`

4. **Verification and Refinement:** I'll review the dependency relations to ensure they make grammatical sense and follow standard dependency grammar principles. For instance, determiners modify nouns, relative pronouns modify nouns, and coordinating conjunctions connect clauses.

5. **Calculating Dependency Distances:** Now, I'll calculate the absolute difference between the head index and the dependent index for each dependency relation:

   * |1 - 2| = 1
   * |2 - 0| = 2
   * |3 - 9| = 6
   * |4 - 9| = 5
   * |5 - 4| = 1
   * |6 - 5| = 1
   * |7 - 8| = 1
   * |8 - 6| = 2
   * |9 - 3| = 6
   * |10 - 11| = 1
   * |11 - 9| = 2
   * |12 - 11| = 1
   * |13 - 15| = 2
   * |14 - 15| = 1
   * |15 - 2| = 13
   * |16 - 15| = 1
   * |17 - 18| = 1
   * |18 - 15| = 3
   * |19 - 15| = 4

6. **Calculating Average Dependency Distance:**  Sum the dependency distances and divide by the total number of dependencies (which is the number of tokens minus the root).

   Sum = 1 + 2 + 6 + 5 + 1 + 1 + 1 + 2 + 6 + 1 + 2 + 1 + 2 + 1 + 13 + 1 + 1 + 3 + 4 = 54
   Number of dependencies = 19
   Average = 54 / 19 ≈ 2.84

7. **Formatting the Output:** Finally, present the dependency tree in the specified list of tuples format and the calculated average dependency distance.
```
[(1, Man, 2), (2, trodde, 0), (3, att, 9), (4, de, 9), (5, som, 4), (6, hade, 5), (7, en, 8), (8, tatuering, 6), (9, var, 2), (10, en, 11), (11, buse, 9), (12, "lagförbrytare", 11), (13, men, 15), (14, så, 15), (15, var, 2), (16, det, 15), (17, absolut, 18), (18, inte, 15), (19, ., 15)]
```

**Average Dependency Distance Calculation:**

To calculate the average dependency distance, we sum the absolute differences between the head and dependent indices for each dependency and then divide by the total number of dependencies.

1. **Calculate the absolute difference for each dependency:**
   - |1 - 2| = 1
   - |2 - 0| = 2
   - |3 - 9| = 6
   - |4 - 9| = 5
   - |5 - 4| = 1
   - |6 - 5| = 1
   - |7 - 8| = 1
   - |8 - 6| = 2
   - |9 - 2| = 7
   - |10 - 11| = 1
   - |11 - 9| = 2
   - |12 - 11| = 1
   - |13 - 15| = 2
   - |14 - 15| = 1
   - |15 - 2| = 13
   - |16 - 15| = 1
   - |17 - 18| = 1
   - |18 - 15| = 3
   - |19 - 15| = 4

2. **Sum the absolute differences:**
   1 + 2 + 6 + 5 + 1 + 1 + 1 + 2 + 7 + 1 + 2 + 1 + 2 + 1 + 13 + 1 + 1 + 3 + 4 = 54

3. **Count the number of dependencies:** There are 19 tokens, and every token except the root has one head, so there are 19 dependencies.

4. **Calculate the average dependency distance:**
   54 / 19 = 2.8421052631578947

**Average Dependency Distance:** 2.84
