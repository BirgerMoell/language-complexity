To analyze the provided sentence and create a dependency tree representation, we can break down the sentence into its components and identify the relationships between them. The punctuation marks will also be treated as individual tokens. Below is the dependency tree representation for the sentence:

1. Especially
2. I
3. want
4. to
5. thank
6. My
7. academic
8. supervisor
9. Martin
10. Törngren
11. who
12. ,
13. despite
14. a
15. heavy
16. workload
17. ,
18. have
19. contributed
20. with
21. a
22. lot
23. of
24. valuable
25. feedback
26. and
27. help
28. with
29. this
30. thesis
31. .

Now, let's create the dependency tree:

1. (1, Especially, 0)
2. (2, I, 3)
3. (3, want, 0)
4. (4, to, 3)
5. (5, thank, 3)
6. (6, My, 8)
7. (7, academic, 8)
8. (8, supervisor, 5)
9. (9, Martin, 8)
10. (10, Törngren, 9)
11. (11, who, 8)
12. (12, ,, 11)
13. (13, despite, 11)
14. (14, a, 16)
15. (15, heavy, 16)
16. (16, workload, 13)
17. (17, ,, 16)
18. (18, have, 0)
19. (19, contributed, 18)
20. (20, with, 19)
21. (21, a, 24)
22. (22, lot, 21)
23. (23, of, 24)
24. (24, valuable, 19)
25. (25, feedback, 24)
26. (26, and, 25)
27. (27, help, 25)
28. (28, with, 27)
29. (29, this, 30)
30. (30, thesis, 28)
31. (31, ., 1)

So the final output would be:

```
[(1, Especially, 0), (2, I, 3), (3, want, 0), (4, to, 3), (5, thank, 3), (6, My, 8), (7, academic, 8), (8, supervisor, 5), (9, Martin, 8), (10, Törngren, 9), (11, who, 8), (12, ,, 11), (13, despite, 11), (14, a, 16), (15, heavy, 16), (16, workload, 13), (17, ,, 16), (18, have, 0), (19, contributed, 18), (20, with, 19), (21, a, 24), (22, lot, 21), (23, of, 24), (24, valuable, 19), (25, feedback, 24), (26, and, 25), (27, help, 25), (28, with, 27), (29, this, 30), (30, thesis, 28), (31, ., 1)]
```