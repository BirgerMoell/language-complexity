To analyze the provided Swedish sentence and generate a dependency tree, we'll follow the structure of the dependencies between the words in the sentence. Here's the resulting output:

```plaintext
[
    (1, Men, 2),
    (2, på, 3),
    (3, Gotland, 4),
    (4, så, 5),
    (5, har, 6),
    (6, vi, 0),
    (7, ju, 5),
    (8, inte, 5),
    (9, det, 10),
    (10, problemet, 6),
    (11, speciellt, 12),
    (12, mycket, 10),
    (13, eftersom, 14),
    (14, vi, 15),
    (15, har, 6),
    (16, en, 17),
    (17, kalkstens, 18),
    (18, berggrund, 15),
    (19, ,, 20),
    (20, och, 21),
    (21, den, 22),
    (22, är, 15),
    (23, basisk, 22),
    (24, ,, 25),
    (25, men, 26),
    (26, det, 27),
    (27, är, 28),
    (28, ändå, 29),
    (29, så, 30),
    (30, att, 31),
    (31, till, 32),
    (32, och, 33),
    (33, med, 34),
    (34, här, 35),
    (35, har, 36),
    (36, faktiskt, 35),
    (37, regnet, 36),
    (38, och, 39),
    (39, allt, 40),
    (40, sådant, 36),
    (41, blivit, 42),
    (42, surare, 41)
]
```

This output consists of tuples representing the position of each token, the token itself, and the index of its head token, following the structure and dependencies of the sentence. Each word is assigned an index based on its order in the sentence. Tokens are represented from their position in the sentence, ensuring punctuation is included.