**Dependency Parse:**

```
MinidatorEn
├── minidator | är
├── stor | som
├── ett | kylskåp
├── och | hade
├── förr | "dumma"
├── terminaler | anslutna
├── numera | ersatta
├── av | persondatorer
├── De | kallas
├── för | minidatorer
├── därför | att
├── de | är
├── mindre | än
├── stordatorer
├── Minidatorer | uppkom
├── som | ett
├── billigare | och
├── behändigare | alternativ
├── Pionjär | var
├── Digital | (numera Compaq)
├── på | tidigt
├── 60-tal
├── men | idag
├── är | det
├── bara | IBM
├── som | framgångsrikt
├── marknadsför | minidatorer
├── nämligen | AS-400
```

**Average Dependency Distance:**

To calculate the average dependency distance, we sum the dependency distances of all tokens and divide by the number of tokens.

```python
total_distance = 0
num_tokens = 0

for token in tokens:
    distance = token.dependency_length
    total_distance += distance
    num_tokens += 1

average_distance = total_distance / num_tokens
```

The dependency distances are:

- MinidatorEn: 0
- minidator: 1
- är: 1
- stor: 1
- som: 1
- ett: 1
- kylskåp: 1
- och: 1
- hade: 1
- förr: 1
- "dumma": 1
- terminaler: 1
- anslutna: 1
- numera: 1
- ersatta: 1
- av: 1
- persondatorer: 1
- De: 0
- kallas: 1
- för: 1
- minidatorer: 1
- därför: 1
- att: 1
- de: 0
- är: 1
- mindre: 1
- än: 1
- stordatorer: 1
- Minidatorer: 1
- uppkom: 1
- som: 1
- ett: 1
- billigare: 1
- och: 1
- behändigare: 1
- alternativ: 1
- Pionjär: 1
- var: 1
- Digital: 0
- (numera Compaq): 1
- på: 1
- tidigt: 1
- 60-tal: 1
- men: 1
- idag: 1
- är: 1
- det: 0
- bara: 1
- IBM: 0
- som: 1
- framgångsrikt: 1
- marknadsför: 1
- minidatorer: 1
- nämligen: 1
- AS-400: 1

Total distance: 53
Number of tokens: 54

**Average Dependency Distance: 0.98**