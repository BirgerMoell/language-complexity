To calculate the average dependency distance, we need to identify the dependencies between the tokens and their respective distances. Here's the breakdown for the given sentence:

1. Det (det) has no head, so we ignore it for now. However, it can be considered as the subject and head is the verb. In the main clause 'Det oroade', det is subject so it's distance is to 'oroade' i.e 1 
   (1)
2. oroade has no head since it is main verb and also head, ignoring it for now.
3. de (main clause subject, distance with oroade 1)
   (d1= 1, referring distance 1)
   Since the head is verb so we will calculate distance from oroade
4. amerikanska (distance with 'säkerhetstjänsterna' is 1)
   (d2 =1)
5. säkerhetstjänsterna (non clause - no head ignoring).
6. och (no head ignoring).
7. hans (distance with 'tidning' is 1)
   (d3=1)
8. egna (distance with 'tidning' is 1)
   (d4=1)
9. tidning (non clause - no head ignoring).
10. The (non clause - since in apposition to 'Negro World', ignoring - however distance with Negro is 1)
11. Negro (has head in the apposition which is 'The Negro World's modification, apposition TWW i.e 'The Negro World' hence d5=1)
   (d5 =1)
    The head of TWW is 'Negro World' which has adjective The Negro whose distance from its head Negro World is 2 
    here in case of 'The Negro' dependency   1 unit head 1 i,1  - 
    TWW has head as 1 and total distance of adj -2 = d_total WW Adj- 2+/3 Total adj we will ignore unit not of adj 4 
    (As unit i for whole the TWW will again utilize i if total 14 = d7   We final would get it after   -12 = The d5 above +1)=
12. World (non clause - has heads in both apposition, since comma is separating them)
   d6 will require to denote separation by colon in apposition thus ignoring)
13. förbjöds (has head in subordinate clause, but having head like NegW, having dependency distance in main word thus 8=dd12 with) 
   a relative clause dependency 
   so =  main dependency or so for given data but will not require ignoring since=  
   verb (apposition part2 - since head for clauses TWW eit)
14. av (distance with 'flera' is 2)
   (d7=2)
15. flera (distance with 'kolonierna' is 1)
   (d8=1)
16. av (distance with 'de' is 1)
   (d9=1)
17. de (distance with 'brittiska' is 1)  
   (d10=1)
18. brittiska (distance with 'kolonierna' is 1)
   (d11=1)
19. kolonierna (last one for end which would need, so d will not be important rather i_t being d in all further)

Finally, average the total dependencies and tokens identified for dependencies ignoring the tokens without 'heads.'

d_total (det with oroade)= 1 (d1)(with Oroade, d2 - de with oroade) = +2   (from ref then for Amer +adj, TWW etc.)  
= d_total (see+ +. .also s- including for also we will not, relative a to given given) subord add-ing value,  excluding v and+ and so finally and and ex d then to to =,  i d sub we should 's get only tokens w) 
= 2 (+d3+hs with TWW)= +1+1+The+ 1=d dependency separation (non + subord 2 ref ing w app or w to app) ignore ,TWWW)= but take app+World's Adj= TWW   
ignore rest ignore while having same i for them & counting depand + also + final result 2+(TWW)+ 
 =  53
Total 11 and i/t ignore s only dependencies & rel and also depand have depand it being depand & final if of the full st also  also:  2,6,11 total is 22 +4- ignoring 4 verb and 2 adj verb h main ' and clause 

Finally, by dividing the total sum of dependency distances (ignoring them non depend see: just as 2 , we clause2= - and heads)