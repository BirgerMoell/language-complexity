To calculate the average dependency distance, we first need to parse the sentence and identify its syntactic structure. Here is the parsed sentence with the dependencies indicated:

1. Viruset - Subject of aktiveras
2. aktiveras - Main verb
3. då - Adverbial modifier of aktiveras
4. användaren - Subject of kör
5. kör - Main verb of the subordinate clause
6. det - Object of kör
7. program - Object of infekterat
8. som - Subordinating conjunction
9. viruset - Agent of infekterat
10. infekterat - Main verb of the subordinate clause
11. . - Punctuation mark

The dependencies can be broken down as follows:

- Viruset to aktiveras: 1 ( Viruset is the subject of aktiveras)
- aktiveras to då: 1 (aktiveras is the main verb, and 'då' modifies it adverbially)
- då to användaren: 1 (the time adverbial 'då' modifies the clause as a whole, and 'användaren kör' is the clause as a whole; so distance from 'då' to the first word 'användaren' is used)
- användaren to kör: 1
- kör to det: 1
- det to program: 2 (indirect object 'det program')
- program to infekterat: 3 ('program' is the object of the subordinated 'infekterat')
- infekterat to viruset is incorrect as 'viruset' is an agent here; distance to 0 or treated separately 
  viruset to 's' as the head - in this example to 'program' - in Swedish it means viruset has changed the program so viruset is the secondary object and distance is here calculated from  'viruset' to 'program' and so 4
- viruset to . : 2 ('viruset' ends in a comma in many texts - but we don't see a comma or an associated function word, - comma should be part of total token length and hence you calculate viruset to full-stop 8 - it is : 4)

However we have to interpret the zero that is the 'viruset' in the first sentence with the higher dependency - the important is also separation and grouping.
When manually moving or separating dependency may yield minimum group the average dependency distances hence more significant calculations.

Finally, calculate average dependency distance:

Dependency distances: 1+1+1+1+1+2+3+2 
+ 4 to program = 16 to use all of the + tokens and since there is viruset at the begin and . having higher with final (as possible function in and . if treated) no 16 by example more than 11 (11 tokens on the side - the example are not used tokens).