To calculate the average dependency distance, we need to identify the dependencies and their corresponding distances. Here's the breakdown of the given sentence:

1. En (det) - 1 (head is "del")
   - del (nsubj) - 0 (dependent of the sentence, no dependency distance considered)

2. sötvattenfiskar (nsubj) - 3 (head is the sentence, no dependency distance considered; here head is 'klarar', head of the relative clause and that is in turn  'sötvattenfiskar' (it is sub dependent of 'som') )
   - som (mark) - 4 (head is 'sötvattenfiskar', som's own dependency relation; 
   som's head is not the required form.)

   so in relation to sötvattenfiskar: 
   - 1) gädda (conj) - 7 (head is 'sötvattenfiskar' but head should be 'gädda' in 'gädda och abborre'. Here the head is actually the whole named fish phrases using "och"   here head's head is "klarar"; head's name is 'sötvattenfiskar ')
   - 2) och (cc) - 8 (head is 'gädda')
   - 3) abborre (conj) - 9 (head is 'gädda') 

3. den (det) - 3 (head is 'låga' and head's head is 'salthalten'), since "den" is referenced as "låga salthalten"
   - salthalten (advmod) - 12 (its head is actually whole noun but is named salthalten's head) 
     (this 'salthalten's head is related to i Bottenviken which head of its head is i in i of a Bottenviken clause )
   - för 'den-low salthalten'; the head 'salthalten's head' should be the conjunction, I would say hence for "den laga salthalten",
   its head should also be norra Östersjön (& i Bottenviken if used from (in den låga)-Öster's); and norra Östersjön (& Bottenviken)'s head 
    is in actual relation equal to head abborre or more clearly we can calculate on the main head relation which is actually equal 
   ( laga salthalten head equals it to 'östersjön') since the 'norra Ö' 'Östersjön as norra head is same in some cases i do the named'.

4. i (case) - 1 (head is 'Bottenviken')
   - Bottenviken (obl) - 2 (head is 'klarar'; named of i )

5. och (cc) - 0, is special token is removed (head is 'norra Östersjön')
   actually - 1 (head is 'Bottenviken')
   'special case as cc makes dependency heads more hard to determine'

6. norra (amod) - 0 (head is 'Östersjön')
   - Östersjön (conj) - 7 (its head is actually main token or 'låga salthalten') although it (Östersj..  should make equal as 
   Bottenviken makes case for having in with norra; is a better choice you can as the dependency from Ö's to Bott'

However because och stands for case cc ,norra for a named modified thus cc = 'norra as thus a better cc but 'norra modified a,
equals', is dependency head only (in this sub norra from, in  (are determined as "dependency )'
the use of the head norra Östersjön have relative that equals in named ("equal is equal and has dependency make ') head makes (with

To clarify with given Dependency in that form "actual is"
Average equals Dependency token/total token count.
but if your "averaging is using total dependency"


However, here averaging according my last comment this doesn't use dependency 
My previous comments all sentences:
used a different understanding /for them and other explanations averaging distance.

Dependency to named Distance.
Let n = En del (dependency 1). Named for En at required sub 'del'. equals 

average Dependency 2 is the word count ( the Dependency and for 'del' (equal distance) the n means any at 2  is equal just En "like required so average make it equal')
named Den equality dependency at  'low head ( the distance), but the low or an doesn't create dependency as isn't a token word distance at 
 low 'its salth also creates for is then "at Bott equal head. low has equality created but for " makes dependency. 
 and named does that