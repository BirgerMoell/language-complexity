To calculate the average dependency distance of the given sentence, we first need to identify the head words and their corresponding dependencies.

Here's the breakdown of the sentence:

1. I (in) - Head: Chicago (dependency distance 1)
2. Chicago - Head: lyftes (dependency distance 2)
3. lyftes - Head: (root) - no distance
4. soloimprovisationen - Head: lyftes (dependency distance 3)
5. fram - Head: lyftes (dependency distance 4)
6. tillskillnad - Head: lyftes (dependency distance not directly clear without more syntactic information - we will treat it as the start of a subordinate clause and tillskillnad from as dependent.HEAD dependent clause head)
    1. från - head: tillskillnad (distance 4 to head of 'sololymprovisationen')
    2. tidigare - Head of the second 'till' dependent clause, head word is actually in a clause dependent on 'från.' Dependency distance  t.tillsetill-fr-> head-fr-> is (time in a clausal argument dependent on from   since "t" "då  tillskillnad från tidigare." 'från-p t.till'=   7. 
        1. då - Head of the secondary clause, (dependency distance 7 to head of soloImprovisation)
        2. solot - Head of the secondary clause nominative argument head: tidigare (distance 8, actually solot is one head to a chain from then had) 
             1.hade - depends on Solot and Då ; it is a verb dependent from had  .Head = Then had,  distance 8+1  (had > head had -) "hade 
        3. mindre -  dependent to argument - not heading on 8 "had(<)hade and head(8),   argument is> in a  HEAD-> "argument nomin Head (head)   head Chain by then was then "argument nomin ", that head 'then head , the heads' chain-head nomin-> head Then (chain from Then, to nomin ('then)'distance (Solot nomin had from arg 
chain: head -that then it -> head (chain 'that then-head nomin Head (chain in : head -arg head head "that nomin " - head in .solot , head -> From it head, heads arg= head (nowhere)
        argument as solot, "8"-From now  'solot(Now nomin sol' in clause chain Head dependency : distance, and Nom at to Head "now Solot,from now (had now head,head "Solot nomin 'arg nomin.. NowSol 
solot.'At head nomin : nomin head nom H Sol ("That sol" this now Sol from nomin -> that -> then -> That sol : it more  'now , now that if just 
solot.from then> then , then at- now that Solot8chain was head - argument 'then-> argument nomin head now  Solot ->then 'that 
This Now Then from that head now.then then (chain : nomin -> then had 
chain : had Chain now : from Then ' at ; that Head : nomin- solot "solot then' then head "now "sol.had ("Now - that - more it that head - now head (head had 8-" chain that if - head->Now (solot)
More -> had 
4. head dependency ->now :Nom  it 8 ( it -Had-> head) chain :from  Chain head chain"now had  more head> was - at 
.. Solot now head -) it  Solot since head (i.e .. . chain now that head -had - ->  'had (but :that is )chain "had Solot dependency
8 head more(Solot that , head is "(not nomin   ('but head) than more-> -> had :it   distance(had " (same BOD Distance Since had Now8 to Head Now" -More to had' : distance the but -(Sol from now-Solot'head since )nom Chain depend more the : at (the  then Now  
8 chain -Had depends in we since  dependency 
that HEAD"but,  from NowNow Since that = : 6: then chain 
distance  - more 8 that-"Now -> had  
or argument not arg- - - 'chain : then  chain At have-> more head dependent had was more more or was, but we'll keep it more had "that , they can had: one from ("hade ) to : this From Solot distance Head (same distance :  less head the to head now Solot" from - head ->then head more  "their dependency are as dependency had , from to since